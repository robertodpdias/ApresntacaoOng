{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport styles from \"./SelectMultiple.styles\";\nimport checkbox from \"../images/icon-checkbox.png\";\nimport checkboxChecked from \"../images/icon-checkbox-checked.png\";\nimport { mergeStyles } from \"./style\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar itemType = PropTypes.oneOfType([PropTypes.string, PropTypes.shape({\n  label: PropTypes.any,\n  value: PropTypes.any\n})]);\nvar styleType = PropTypes.oneOfType([PropTypes.object, PropTypes.number, PropTypes.array]);\nvar sourceType = PropTypes.oneOfType([PropTypes.object, PropTypes.number]);\n\nvar SelectMultiple = function (_Component) {\n  _inherits(SelectMultiple, _Component);\n\n  var _super = _createSuper(SelectMultiple);\n\n  function SelectMultiple(props) {\n    var _this;\n\n    _classCallCheck(this, SelectMultiple);\n\n    _this = _super.call(this, props);\n\n    _this.keyExtractor = function (item, index) {\n      return index.toString();\n    };\n\n    _this.renderLabel = function (label, style, selected) {\n      if (_this.props.renderLabel) {\n        return _this.props.renderLabel(label, style, selected);\n      }\n\n      return _jsx(Text, {\n        style: style,\n        children: label\n      });\n    };\n\n    _this.renderItemRow = function (row) {\n      var _this$props = _this.props,\n          checkboxSource = _this$props.checkboxSource,\n          rowStyle = _this$props.rowStyle,\n          labelStyle = _this$props.labelStyle,\n          checkboxStyle = _this$props.checkboxStyle;\n      var _this$props2 = _this.props,\n          selectedCheckboxSource = _this$props2.selectedCheckboxSource,\n          selectedRowStyle = _this$props2.selectedRowStyle,\n          selectedCheckboxStyle = _this$props2.selectedCheckboxStyle,\n          selectedLabelStyle = _this$props2.selectedLabelStyle;\n\n      if (row.item.selected) {\n        checkboxSource = selectedCheckboxSource;\n        rowStyle = mergeStyles(styles.row, rowStyle, selectedRowStyle);\n        checkboxStyle = mergeStyles(styles.checkbox, checkboxStyle, selectedCheckboxStyle);\n        labelStyle = mergeStyles(styles.label, labelStyle, selectedLabelStyle);\n      } else {\n        rowStyle = mergeStyles(styles.row, rowStyle);\n        checkboxStyle = mergeStyles(styles.checkbox, checkboxStyle);\n        labelStyle = mergeStyles(styles.label, labelStyle);\n      }\n\n      return _jsx(TouchableWithoutFeedback, {\n        onPress: function onPress() {\n          return _this.onRowPress(row.item);\n        },\n        children: _jsxs(View, {\n          style: rowStyle,\n          children: [_jsx(Image, {\n            style: checkboxStyle,\n            source: checkboxSource\n          }), _this.renderLabel(row.item.label, labelStyle, row.item.selected)]\n        })\n      });\n    };\n\n    _this.state = {\n      dataSource: []\n    };\n    return _this;\n  }\n\n  _createClass(SelectMultiple, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var rows = this.getRowData(this.props);\n      this.setState({\n        dataSource: rows\n      });\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var rows = this.getRowData(nextProps);\n      this.setState({\n        dataSource: rows\n      });\n    }\n  }, {\n    key: \"getRowData\",\n    value: function getRowData(_ref) {\n      var items = _ref.items,\n          selectedItems = _ref.selectedItems;\n      items = items.map(this.toLabelValueObject);\n      selectedItems = (selectedItems || []).map(this.toLabelValueObject);\n      items.forEach(function (item) {\n        item.selected = selectedItems.some(function (i) {\n          return i.value === item.value;\n        });\n      });\n      return items;\n    }\n  }, {\n    key: \"onRowPress\",\n    value: function onRowPress(row) {\n      var label = row.label,\n          value = row.value;\n      var _this$props3 = this.props,\n          selectedItems = _this$props3.selectedItems,\n          maxSelect = _this$props3.maxSelect;\n      selectedItems = (selectedItems || []).map(this.toLabelValueObject);\n      var index = selectedItems.findIndex(function (selectedItem) {\n        return selectedItem.value === value;\n      });\n\n      if (index > -1) {\n        selectedItems = selectedItems.filter(function (selectedItem) {\n          return selectedItem.value !== value;\n        });\n      } else {\n        if (maxSelect != null && selectedItems.length >= maxSelect) {\n          return;\n        } else {\n          selectedItems = selectedItems.concat({\n            label: label,\n            value: value\n          });\n        }\n      }\n\n      this.props.onSelectionsChange(selectedItems, {\n        label: label,\n        value: value\n      });\n    }\n  }, {\n    key: \"toLabelValueObject\",\n    value: function toLabelValueObject(obj) {\n      if (Object.prototype.toString.call(obj) === '[object String]') {\n        return {\n          label: obj,\n          value: obj\n        };\n      } else {\n        return {\n          label: obj.label,\n          value: obj.value\n        };\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var dataSource = this.state.dataSource;\n      var _this$props4 = this.props,\n          style = _this$props4.style,\n          flatListProps = _this$props4.flatListProps,\n          keyExtractor = _this$props4.keyExtractor;\n      return _jsx(FlatList, _objectSpread({\n        horizontal: true,\n        style: style,\n        keyExtractor: keyExtractor || this.keyExtractor,\n        data: dataSource,\n        renderItem: this.renderItemRow\n      }, flatListProps));\n    }\n  }]);\n\n  return SelectMultiple;\n}(Component);\n\nSelectMultiple.propTypes = {\n  items: PropTypes.arrayOf(itemType).isRequired,\n  selectedItems: PropTypes.arrayOf(itemType),\n  maxSelect: PropTypes.number,\n  onSelectionsChange: PropTypes.func.isRequired,\n  keyExtractor: PropTypes.func,\n  checkboxSource: sourceType,\n  selectedCheckboxSource: sourceType,\n  renderLabel: PropTypes.func,\n  flatListProps: PropTypes.any,\n  style: styleType,\n  rowStyle: styleType,\n  checkboxStyle: styleType,\n  labelStyle: styleType,\n  selectedRowStyle: styleType,\n  selectedCheckboxStyle: styleType,\n  selectedLabelStyle: styleType\n};\nSelectMultiple.defaultProps = {\n  selectedItems: [],\n  style: {},\n  rowStyle: {},\n  checkboxStyle: {},\n  checkboxCheckedStyle: {},\n  labelStyle: {},\n  maxSelect: null,\n  checkboxSource: checkbox,\n  selectedCheckboxSource: checkboxChecked,\n  renderLabel: null\n};\nexport { SelectMultiple as default };","map":{"version":3,"sources":["C:/Users/jaque/Desktop/SENAI/ONG/Mobile/node_modules/react-native-select-multiple/src/SelectMultiple.js"],"names":["React","Component","PropTypes","styles","checkbox","checkboxChecked","mergeStyles","itemType","oneOfType","string","shape","label","any","value","styleType","object","number","array","sourceType","SelectMultiple","props","keyExtractor","item","index","toString","renderLabel","style","selected","renderItemRow","row","checkboxSource","rowStyle","labelStyle","checkboxStyle","selectedCheckboxSource","selectedRowStyle","selectedCheckboxStyle","selectedLabelStyle","onRowPress","state","dataSource","rows","getRowData","setState","nextProps","items","selectedItems","map","toLabelValueObject","forEach","some","i","maxSelect","findIndex","selectedItem","filter","length","concat","onSelectionsChange","obj","Object","prototype","call","flatListProps","propTypes","arrayOf","isRequired","func","defaultProps","checkboxCheckedStyle"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { View, FlatList, Text, TouchableWithoutFeedback, Image } from 'react-native'\nimport styles from './SelectMultiple.styles'\nimport checkbox from '../images/icon-checkbox.png'\nimport checkboxChecked from '../images/icon-checkbox-checked.png'\nimport { mergeStyles } from './style'\n\nconst itemType = PropTypes.oneOfType([\n  PropTypes.string,\n  PropTypes.shape({ label: PropTypes.any, value: PropTypes.any })\n])\n\nconst styleType = PropTypes.oneOfType([\n  PropTypes.object,\n  PropTypes.number,\n  PropTypes.array\n])\n\nconst sourceType = PropTypes.oneOfType([PropTypes.object, PropTypes.number])\n\n// A customiseable FlatList that allows you to select multiple rows\nexport default class SelectMultiple extends Component {\n  static propTypes = {\n    items: PropTypes.arrayOf(itemType).isRequired,\n    selectedItems: PropTypes.arrayOf(itemType),\n    maxSelect: PropTypes.number,\n    onSelectionsChange: PropTypes.func.isRequired,\n    keyExtractor: PropTypes.func,\n\n    checkboxSource: sourceType,\n    selectedCheckboxSource: sourceType,\n    renderLabel: PropTypes.func,\n    flatListProps: PropTypes.any,\n    style: styleType,\n    rowStyle: styleType,\n    checkboxStyle: styleType,\n    labelStyle: styleType,\n\n    selectedRowStyle: styleType,\n    selectedCheckboxStyle: styleType,\n    selectedLabelStyle: styleType\n  }\n\n  static defaultProps = {\n    selectedItems: [],\n    style: {},\n    rowStyle: {},\n    checkboxStyle: {},\n    checkboxCheckedStyle: {},\n    labelStyle: {},\n    maxSelect: null,\n    checkboxSource: checkbox,\n    selectedCheckboxSource: checkboxChecked,\n    renderLabel: null\n  }\n\n  constructor (props) {\n    super(props)\n    this.state = { dataSource: [] }\n  }\n\n  componentDidMount () {\n    const rows = this.getRowData(this.props)\n    this.setState({ dataSource: rows })\n  }\n\n  componentWillReceiveProps (nextProps) {\n    const rows = this.getRowData(nextProps)\n    this.setState({ dataSource: rows })\n  }\n\n  getRowData ({ items, selectedItems }) {\n    items = items.map(this.toLabelValueObject)\n    selectedItems = (selectedItems || []).map(this.toLabelValueObject)\n\n    items.forEach((item) => {\n      item.selected = selectedItems.some((i) => i.value === item.value)\n    })\n\n    return items\n  }\n\n  onRowPress (row) {\n    const { label, value } = row\n    let { selectedItems, maxSelect } = this.props\n\n    selectedItems = (selectedItems || []).map(this.toLabelValueObject)\n\n    const index = selectedItems.findIndex((selectedItem) => selectedItem.value === value)\n\n    if (index > -1) {\n      selectedItems = selectedItems.filter((selectedItem) => selectedItem.value !== value)\n    } else {\n      if (maxSelect != null && selectedItems.length >= maxSelect) {\n        return\n      } else {\n        selectedItems = selectedItems.concat({ label, value })\n      }\n    }\n\n    this.props.onSelectionsChange(selectedItems, { label, value })\n  }\n\n  toLabelValueObject (obj) {\n    if (Object.prototype.toString.call(obj) === '[object String]') {\n      return { label: obj, value: obj }\n    } else {\n      return { label: obj.label, value: obj.value }\n    }\n  }\n\n  keyExtractor = (item, index) => index.toString()\n\n  render () {\n    const { dataSource } = this.state\n    const { style, flatListProps, keyExtractor } = this.props\n    return (\n      <FlatList\n        horizontal\n        style={style}\n        keyExtractor={keyExtractor || this.keyExtractor}\n        data={dataSource}\n        renderItem={this.renderItemRow}\n        {...flatListProps}\n      />\n    )\n  }\n\n  renderLabel = (label, style, selected) => {\n    if (this.props.renderLabel) {\n      return this.props.renderLabel(label, style, selected)\n    }\n    return (\n      <Text style={style}>{label}</Text>\n    )\n  }\n\n  renderItemRow = (row) => {\n    let {\n      checkboxSource,\n      rowStyle,\n      labelStyle,\n      checkboxStyle\n    } = this.props\n\n    const {\n      selectedCheckboxSource,\n      selectedRowStyle,\n      selectedCheckboxStyle,\n      selectedLabelStyle\n    } = this.props\n\n    if (row.item.selected) {\n      checkboxSource = selectedCheckboxSource\n      rowStyle = mergeStyles(styles.row, rowStyle, selectedRowStyle)\n      checkboxStyle = mergeStyles(styles.checkbox, checkboxStyle, selectedCheckboxStyle)\n      labelStyle = mergeStyles(styles.label, labelStyle, selectedLabelStyle)\n    } else {\n      rowStyle = mergeStyles(styles.row, rowStyle)\n      checkboxStyle = mergeStyles(styles.checkbox, checkboxStyle)\n      labelStyle = mergeStyles(styles.label, labelStyle)\n    }\n\n    return (\n      <TouchableWithoutFeedback onPress={() => this.onRowPress(row.item)}>\n        <View style={rowStyle}>\n          <Image style={checkboxStyle} source={checkboxSource} />\n          {this.renderLabel(row.item.label, labelStyle, row.item.selected)}\n        </View>\n      </TouchableWithoutFeedback>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}